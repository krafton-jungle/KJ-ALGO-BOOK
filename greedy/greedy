## 회의실 배정 문제

세 번쨰 그리디(Greedy) 알고리즘의 예시로 회의실 배정 문제가 있다.

한 개의 회의실을 사용하면서 가능한 한 많은 회의를 겹치지 않게 배치하려면 몇 개까지 가능한지 계산하는 문제다.

이 문제를 통해 그리디 알고리즘의 핵심 전략을 이해할 수 있다.

## 문제 설명

한 개의 회의실이 있다. 이를 사용하려는 N개의 회의에 대하여 회의실 사용표를 만들려고 한다.

각 회의 i에 대해 시작 시간과 끝나는 시간이 주어지며, 회의는 겹치지 않게 배치해야 한다.

회의는 한 번 시작하면 중단할 수 없으며, 한 회의가 끝나는 것과 동시에 다음 회의를 시작할 수 있다.

또한, 회의의 시작 시간과 종료 시간이 같을 수도 있으며, 이 경우 해당 회의는 시작하자마자 끝나는 것으로 간주한다.

## 입력

- 첫째 줄에 회의의 수 N이 주어진다. (1 ≤ N ≤ 100,000)
- 둘째 줄부터 N개의 줄에 걸쳐 각 회의의 시작 시간과 종료 시간이 공백으로 구분되어 주어진다.
- 시작 시간과 종료 시간은 2³¹-1보다 작거나 같은 자연수 또는 0이다.

## 출력

- 겹치지 않게 배치할 수 있는 회의의 최대 개수를 출력한다.

---

이 문제는 입력으로 주어진 회의 N개의 시작 시간과 종료 시간을 바탕으로, 한 개의 회의실에서 겹치지 않게 최대한 많은 회의를 배치할 수 있는지 그 개수를 구하는 것이다.

## 코드 구현(Python)

```python
n = int(input())  # 회의 개수 입력
meetings = []  # 회의 정보를 저장할 리스트

for _ in range(n):
    line = input()
    parts = line.split()
    start = int(parts[0])
    end = int(parts[1])
    meetings.append((start, end))

# 종료 시간을 기준으로 정렬, 같을 경우 시작 시간이 빠른 순으로 정렬
meetings.sort(key=lambda x: (x[1], x[0]))

count = 0
end_time = 0

for start, end in meetings:
    if start >= end_time:
        count += 1
        end_time = end

print(count)
```

---

## 그리디 알고리즘의 핵심

회의가 겹치지 않도록 하면서 가장 많은 회의를 선택하려면 어떤 기준으로 회의를 선택해야 할까?

이 문제에서 핵심은 가능한 많은 회의를 선택하려면 **회의의 종료 시간이 빠른 순서대로 선택**해야 한다는 점이다.

이는 그리디 알고리즘의 대표적인 전략으로, **현재 시점에서 최적인 선택이 전체적으로도 최적**일 때 유효하다.

회의를 종료 시간 기준으로 정렬하면, 회의가 끝난 직후 가능한 가장 빠른 시간에 다음 회의를 시작할 수 있다.

이는 남은 시간 동안 회의실을 가장 많이 활용할 수 있는 선택이 된다.

```python
meetings.sort(key=lambda x: (x[1], x[0]))
```

이 정렬 기준은 다음과 같은 두 원칙을 따른다.

1. 종료 시간이 빠른 회의를 우선으로 정렬한다.
2. 종료 시간이 같은 경우, 시작 시간이 빠른 회의를 우선으로 정렬한다.

정렬된 회의 리스트를 순회하면서 이전 회의가 끝난 시간 이후에 시작되는 회의만 선택한다.

이를 통해 **겹치지 않는 회의들의 집합**을 구성할 수 있으며, 이 집합의 크기가 곧 회의실을 사용할 수 있는 회의의 최대 개수이다.

```python
count = 0
end_time = 0

for start, end in meetings:
    if start >= end_time:
        count += 1
        end_time = end
```

위 반복문에서 핵심은 `start >= end_time` 조건이다.

이는 현재 회의의 시작 시간이 이전 회의의 종료 시간보다 크거나 같은 경우에만 회의를 선택하겠다는 의미이다.

조건을 만족할 때마다 `count`를 증가시키고, 다음 회의와 비교를 위해 `end_time`을 갱신한다.

---

## 결론

이 문제는 **탐욕적 선택 속성**과 **최적 부분 구조**를 모두 만족한다.

따라서 그리디 알고리즘을 통해 전역 최적해를 구할 수 있는 대표적인 예제이다.

회의실 배정 문제는 그리디 알고리즘의 동작 원리와 전략이 직관적으로 잘 드러나는 구조이며,

정렬을 기반으로 한 선택 기준만으로 최적의 해를 구할 수 있는 전형적인 문제이다.

---
